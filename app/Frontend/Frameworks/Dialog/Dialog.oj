var merge = require("merge");
require("BIRD3/Frontend/Frameworks/onEnter");

// The actual renderer
var render = require("./render");
var guidGenerator = require("./guidGenerator");

@implementation Dialog
// Public methods
+(Modal)alert:(string)message {
    return render({
        title: "Alert",
        type: "success",
        size: "sm",
        body: message,
        footer: '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>'
    });
}

+(Modal)prompt:(string)title withMessage:(string)message onResult:(callable)cb {
    var putId = guidGenerator();
    return render({
        title: title,
        size: "sm",
        type: "info",
        header: '<p>'+message+'</p>',
        body: '<div class="form-group">'
                +'<input type="text" name="'+putId+'" id="'+putId+'" class="form-control" />'
                +'</div>',
        footer: '<button id="'+putId+'-button" class="btn btn-default">OK</button>'
    }, function(modal, id, node){
        var close = modal.close;
        var $modal = $("#"+id);
        modal.close = function() {
            var val = $modal.find("#"+putId).val();
            cb(val);
            close.call(modal);
        }
        // Set up the triggers
        $modal.find("#"+putId+"-button").click(modal.close);
        $modal.find("#"+putId).onEnter(modal.close);
    });
}

+(Modal)confirm:(string)message options:(object)options onResult:(callable)cb {
    var okId = guidGenerator();
    var nopeId = guidGenerator();
    return render({
        title: options.title || "Question",
        size: options.size || "lg",
        type: options.type || "warning",
        body: message,
        footer: [
            '<button id="'+okId+'-ok" class="btn btn-warning">Yep</button>',
            '<button id="'+nopeId+'-nope" class="btn btn-default">Nope</button>'
        ].join(" "),
    }, function(modal, id, node){
        // Add the ids
        modal.okId = okId;
        modal.nopeId = nopeId;
        // Set up the triggers
        var okBtn = document.getElementById(okId+"-ok")
        okBtn.addEventListener("click", function(e){
            modal.close();
            cb(true);
        });
        var nopeBtn = document.getElementById(nopeId+"-nope");
        nopeBtn.addEventListener("click", function(e){
            modal.close();
            cb(false);
        });
    });
}

+(Modal)info:(string)message {
    return render({
        title: "Information",
        type: "info",
        size: "lg",
        body: message,
        footer: '<button type="button" class="btn btn-default" data-dismiss="modal">Okay.</button>'
    });
}
+(Modal)error:(string)message {
    return render({
        title: "An error has occured!",
        type: "danger",
        size: "lg",
        body: message,
        footer: '<button type="button" class="btn btn-default" data-dismiss="modal">Okay.</button>'
    });
}

+(void)installOn:(Object)target {
    var d = [Dialog class];
    var prompter = function(m,c){
        return [d prompt:window.title withMessage:m withResult:c];
    };
    var oPrompt = target.prompt || prompter;
    var conv = {
        alert: function(msg) { return [d alert:msg]; },
        errorAlert: function(msg) { return [d error:msg]; },
        infoAlert: function(msg) { return [d info:msg]; },
        question: function(m, o, cb) { return [d confirm:m options:o onResult:cb]; },
        prompt: function(q, cb) {
            if(typeof cb != "function") {
                return oPrompt.apply(target, arguments);
            } else {
                return prompter(q, cb);
            }
        }
    };
    for(var fn in conv) target[fn]=conv[fn];
}
@end

// OJ classes aren't objects, per-se. They are registered into
// $oj_oj._cls instead. But calling [o class] reveals that very object.
// It can even be messaged. So in a way, this allows a class
// "to be exported" - although, you shouldn't do that. It's simply
// semantically wrong with ObjC - but the only real solution for WebPack,
// if I don't want to use a preprocessor.
module.exports = [Dialog class];

// Install on self, allowing it to be used from raw JS.
[Dialog installOn:module.exports];

module.exports.installOn = function(target) {
    return [Dialog installOn:target];
}
