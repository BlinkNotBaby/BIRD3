// Modules
var Grapnel = require("grapnel");
var oo = require("o.o");

var pushRouter = new Grapnel({
    pushState: true,
    root: "/"
});
var hashRouter = new Grapnel({
    pushState: false,
    hashbang: true
});

// Hacky way to enable hashbang AND pushState routing.
var app = pushRouter;
app.get = function(){
    hashRouter.get.apply(hashBangrouter, arguments);
    Grapnel.prototype.get.apply(this, arguments);
}

// Helper
function url(u) {
    var scheme = location.protocol+"//";
    var host = location.hostname;
    var pathname = ( u.charAt(0) == "/"
        ? u
        : location.pathname+"/"+u
    );
    return scheme+host+pathname;
}

// We always include the main script.
// require("main.oj") - actually copy the app content here.
// require("./Compatibility.js") - Pull in a compatibility layer.

/*
    This router is meant for SPA apps.

    In our case, we will:
    - pick up the route.
    - Send a PJAX request to the server
    - Shove the contents into the body.

    If a browser does not support PushState:
    - Let the site behave like it normally would.
    - Each click triggers a new load.
    - When a page loads, run the proper route code, if any.
*/

app.get("/docs", function(req, e, next){
    require.ensure([
        "BIRD3/App/Controllers/DocsController",
        "BIRD3.docs"
    ], function(require){
        var controller = require("BIRD3/App/Controllers/DocsController");
        var docs = require("BIRD3.docs");
        (new Controller(docs)).render();
    }, "DocsController");
});

app.get("/chat", function(req){
    /*
        - Modernize the chat to work with WebPack
        - Load the chat
        - When the user leaves the page (aka. navigates away),
          log the user out using chat.logout();
        - chat.logout() should accept a callback, so that we can delay.
    */
    /*require(["BIRD3/App/Modules/Chat"], function(chat){
        // Do something with chat.
    });*/
});

// the catch-all route.
// Will be called pretty much anytime a regular page is requested.
app.get("/*", function(req, e, next){
    if(window.location.pathname !== e.value) {
        // We aren't on that page, so...
        ajax({
            url: url(e.value),
            headers: {
                "X-PJAX": "true"
            }
        }, function(code, res){
            /*
                Since this is a PJAX request, `res` will contain
                a JSON object. Each key in this object responds to
                an ID within the DOM.
            */
            try {
                var parts = JSON.parse(res);
                for(var DomID in parts) {
                    var html = parts[DomID];
                    document.getElementById(DomID).innerHTML = html;
                    /*
                        this.controller = require("BIRD3/App/Controller/MainController");
                        RunApplication(this, req);
                    */
                    app.trigger("request-done");
                }
            } catch(e) {
                // We probably got raw HTML. Load it.
                // FIXME: ...load it into the proper place.
                document.body.innerHTML(res);
            }
        });
    }
});

$("[data-pjax]").click(function(e){
    if(hasPushState) {
        // This is a PJAX link. So hold it right there.
        e.preventDefault();
        app.navigate(e.target.attributes.href);
    }
});
