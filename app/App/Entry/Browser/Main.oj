#include <application.oj>
// import StartApplication from "Application.oj"

// Commons
require("./Support/Common");

// Setup the footer stuff
var makeFooter = require("BIRD3/Frontend/Design/footer");

// Introduce a convenience method.
var Dialog = require("BIRD3/Frontend/Frameworks/Dialog/Dialog");
[Dialog installOn:window];

@implementation BIRD3App {
    var scConn; // SocketCluster connection
    var rpc;    // RPC system instance
    var rpcr;   // RPC system method proxy
    var args;   // Args passed from request
}
-(void)appIsPreparingWithArguments:(object)_args amount:(integer)argc {
    //console.log("args", args);
    self.args = _args;
}
-(bool)appIsLaunching {
    // Design! o.o
    makeFooter();

    // Talk to the backend
    require.ensure([], function(require){
        var SC = require("socketcluster-client/index");
        var avs = require("avs-rpc");
        scConn = SC.connect();
        rpc = new avs.scRpc(scConn);
        scConn.on('error', function (err){ console.log("Error:", err); });
        scConn.on('connect', function() {
            // Logging
            scConn.on("client_log", function(msg){ console.log("REMOTE>", msg); });

            // RPC
            scConn.on("rpc_init_data", function(methods){
                //console.log("Methods:",methods);
                rpcr = rpc.remote.call(rpc, methods);
                // rpcr.foo({baz:"bar"}, console.log); // func(err, res)
            }).emit("rpc_init");

            // Save the ajax. Update visit time.
            // FIXME: No dupes! In fact, maybe PHP itself could emit this.
            scConn.emit("update_user_visit", document.cookie);
        });
    }, "SocketCluster");

    /*require.ensure([], function(require){
        var oo = require("BIRD3/Frontend/Frameworks/o.o/main");
        window.oo = oo;
    }, "o.o");*/

    return true;
}
-(void)run {
    // o.o
}

-(id)appIsClosing:(Event)e {
    //console.log("Closing...", e);
}

-(BIRD3App)emit:(string)name data:(id)obj {
    scConn.emit(name, obj);
    return self;
}

-(BIRD3App)on:(string)name callback:(callable)cb {
    scConn.on(name, cb);
    return self;
}
@end

// imagine int main(int argc, char** argv){...} :)
StartApplication([BIRD3App class]);
