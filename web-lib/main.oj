#include <application.oj>
#include <dialog.oj>

// Commons
require("./misc/common");

function makeFooter() {
    var fullHeight = 0
        + $("#MainPage").height()
        + $("footer").height();
    if(window.innerHeight < fullHeight) return $('footer').css('margin-top',"auto");
    if($("body").height() > $("#MainPage").height()) {
        $('footer').css('margin-top',(
            window.innerHeight
            - $('#MainPage').height()
            - $('footer').height()
        )+"px");
    } else {
        $('footer').css('margin-top',"auto");
    }
}
window.addEventListener("resize", makeFooter);

// Introduce a convenience method.
[Dialog installOn:window];

@implementation BIRD3App {
    var sc, rpc, rpcr, args;
}
-(void)appIsPreparingWithArguments:(object)args amount:(integer)argc {
    //console.log("args", args);
    self.args = args;
}
-(bool)appIsLaunching {
    // Design! o.o
    makeFooter();

    // Talk to the backend
    require(
        ["socketcluster-client/index", "avs-rpc"],
        function(socketcluster, avs){
            sc = socketcluster.connect();
            rpc = new avs.scRpc(sc);
            sc.on('error', function (err){ console.log("Error:", err); });
            sc.on('connect', function() {
                // Logging
                sc.on("client_log", function(msg){ console.log("REMOTE>", msg); });

                // RPC
                sc.on("rpc_init_data", function(methods){
                    //console.log("Methods:",methods);
                    rpcr = rpc.remote.call(rpc, methods);
                    // rpcr.foo({baz:"bar"}, console.log); // func(err, res)
                }).emit("rpc_init");

                // Save the ajax. Update visit time.
                // FIXME: No dupes! In fact, maybe PHP itself could emit this.
                sc.emit("update_user_visit", document.cookie);
                console.log(sc);
            });
        }
    );

    return true;
}
-(void)run {
    //console.log("Running main logic...");
}

-(id)appIsClosing:(Event)e {
    //console.log("Closing...", e);
}

-(BIRD3App)emit:(string)name data:(id)obj {
    sc.emit(name, obj);
    return self;
}

-(BIRD3App)on:(string)name callback:(callable)cb {
    sc.on(name, cb);
    return self;
}
@end

// imagine int main(int argc, char** argv){...} :)
StartApplication([BIRD3App class]);
