// Commons
require("./misc/common");

function makeFooter() {
    var fullHeight = 0
        + $("#MainPage").height()
        + $("footer").height();
    if(window.innerHeight < fullHeight) return $('footer').css('margin-top',"auto");
    if($("body").height() > $("#MainPage").height()) {
        $('footer').css('margin-top',(
            window.innerHeight
            - $('#MainPage').height()
            - $('footer').height()
        )+"px");
    } else {
        $('footer').css('margin-top',"auto");
    }
}
window.addEventListener("resize", makeFooter);
$.ready(makeFooter);

// Dialogs!
#include <application.oj>
#include <dialog.oj>

// Introduce a convenience method.
window.alert = function(msg) {
    [Dialog alert:msg];
};

@implementation BIRD3App {
    var socket, rpc, rpcr;
}
-(void)appIsPreparingWithArguments:(object)args {
    console.log("args", args);
}
-(bool)appIsLaunching {
    // Talk to the backend
    require(
        ["socketcluster-client/index", "avs-rpc", "nanoajax/index"],
        function(sc, avs, nanoajax){
            socket = sc.connect();
            rpc = new avs.scRpc(socket);
            socket.on('error', function (err){ console.log("Error:", err); });
            socket.on('connect', function() {
                socket.on("rpc_init_data", function(methods){
                    console.log("Methods:",methods);
                    rpcr = rpc.remote.call(rpc, methods);
                    // rpcr.foo({baz:"bar"}, console.log); // func(err, res)
                }).emit("rpc_init");
            });

            // Do an AJAX request to Yii to update the user. Easy.
            // FIXME: Do it via SC?
            nanoajax.ajax(window.location.pathname+"?"+[
                "ajax=true", "via=bird3",
                "action="+encodeURIComponent("user:update_visit")
            ].join("&"), function(code, res, req){
                console.log("AJAX",code,res);
            });
        }
    );

    return true;
}
-(void)run {
    console.log("Running main logic...");
}

-(id)appIsClosing:(Event)e {
    console.log("Closing...", e);
}

-(BIRD3App)emit:(string)name data:(id)obj {
    io.emit(name, obj);
    return self;
}

-(BIRD3App)on:(string)name callback:(callable)cb {
    io.on(name, cb);
    return self;
}
@end

// imagine int main(int argc, char** argv){...} :)
StartApplication([BIRD3App class]);
